{
    "include": [
        "src/**/*.ts" // 包含的 TypeScript 文件的路径模式
    ],
    "exclude": [
        "node_modules",
        "example" // 排除的目录或文件
    ],
    "compilerOptions": {
        /* 语言和环境 || Language and Environment */
        "target": "es6", // 目标 ECMAScript 版本

        /* 模块 || Modules */
        "module": "commonjs", // 模块系统

        /* Emit */
        "outDir": "./dist", // 编译输出目录
        "esModuleInterop": true, // 启用 esModuleInterop，支持以 import/export 语法引入 CommonJS 模块
        "forceConsistentCasingInFileNames": true, // 强制文件名的一致性，避免大小写问题引发的错误

        /* Type Checking */
        // "strict": true, // 启用所有严格类型检查选项
        "skipLibCheck": true // 跳过声明文件的类型检查

        ///////////////////////////////////////////////////////////////////////////////////////////
        /* 访问 https://aka.ms/tsconfig 了解有关此文件的更多信息 */
        /* 项目 */
        // "incremental": true,                              /* 保存 .tsbuildinfo 文件以支持项目的增量编译。 */
        // "composite": true,                                /* 启用一些约束，允许 TypeScript 项目与项目引用一起使用。 */
        // "tsBuildInfoFile": "./.tsbuildinfo",              /* 指定 .tsbuildinfo 增量编译文件的路径。 */
        // "disableSourceOfProjectReferenceRedirect": true,  /* 禁用在编辑时将项目引用源文件而不是声明文件的首选项。 */
        // "disableSolutionSearching": true,                 /* 在编辑时减少 TypeScript 自动加载的项目数。 */
        // "disableReferencedProjectLoad": true,             /* 禁用通过引用项目来扩展 TypeScript 加载的文件数。 */
        /* 语言和环境 || Language and Environment */
        // "target": "es2016"                                /* 设置 JavaScript 语言版本以生成兼容的库声明。 */,
        // "lib": [],                                        /* 指定一组捆绑在一起的库声明文件，描述目标运行时环境。 */
        // "jsx": "preserve",                                /* 指定生成的 JSX 代码。 */
        // "experimentalDecorators": true,                   /* 启用对实验性装饰器的支持。 */
        // "emitDecoratorMetadata": true,                    /* 在源文件中为已装饰的声明发出设计类型元数据。 */
        // "jsxFactory": "",                                 /* 指定在目标 React JSX 输出时使用的 JSX 工厂函数，例如 'React.createElement' 或 'h'。 */
        // "jsxFragmentFactory": "",                         /* 指定在目标 React JSX 输出时用于片段的 JSX 片段引用，例如 'React.Fragment' 或 'Fragment'。 */
        // "jsxImportSource": "",                            /* 指定在使用 'jsx: react-jsx*' 时导入 JSX 工厂函数的模块说明符。 */
        // "reactNamespace": "",                             /* 指定 'createElement' 调用的对象。仅在目标 'react' JSX 输出时适用。 */
        // "noLib": true,                                    /* 禁用包括任何库文件的默认 lib.d.ts。 */
        // "useDefineForClassFields": true,                  /* 发出符合 ECMAScript 标准的类字段。 */
        // "moduleDetection": "auto",                        /* 控制 TypeScript 查找给定模块说明符的文件的方法。 */

        /* 模块 || Modules */
        // "module": "commonjs"                              /* 指定生成的模块代码。 */,
        // "rootDir": "./",                                  /* 指定源文件的根文件夹。 */,
        // "moduleResolution": "node10",                     /* 指定 TypeScript 查找给定模块说明符的文件的方法。 */
        // "baseUrl": "./",                                  /* 指定解析非相对模块名时的基本目录。 */
        // "paths": {},                                      /* 指定重新映射导入以进行额外查找的条目集。 */
        // "rootDirs": [],                                   /* 当解析模块时，允许将多个文件夹视为一个。 */
        // "typeRoots": [],                                  /* 指定行为类似于 './node_modules/@types' 的多个文件夹。 */
        // "types": [],                                      /* 指定要包括的类型
        // "allowUmdGlobalAccess": true,                     /* 允许从模块访问 UMD 全局变量。 */
        // "moduleSuffixes": [],                             /* 在解析模块时搜索的文件名后缀列表。 */
        // "allowImportingTsExtensions": true,               /* 允许导入包含 TypeScript 文件扩展名的文件。需要设置 '--moduleResolution bundler' 以及 '--noEmit' 或 '--emitDeclarationOnly'。 */
        // "resolvePackageJsonExports": true,                /* 解析包导入时使用 package.json 的 'exports' 字段。 */
        // "resolvePackageJsonImports": true,                /* 解析导入时使用 package.json 的 'imports' 字段。 */
        // "customConditions": [],                           /* 在解析导入时设置的除了解析器特定默认条件之外的条件集。 */
        // "resolveJsonModule": true,                        /* 启用导入 .json 文件。 */
        // "allowArbitraryExtensions": true,                 /* 启用导入任何扩展名的文件，前提是存在声明文件。 */
        // "noResolve": true,                                /* 禁止 'import'、'require' 或 '<reference>' 扩展 TypeScript 应添加到项目中的文件数量。 */
        /* JavaScript Support */
        // "allowJs": true,                                  /* 允许 JavaScript 文件成为项目的一部分。使用 'checkJS' 选项来从这些文件中获取错误信息。 */
        // "checkJs": true,                                  /* 在经过类型检查的 JavaScript 文件中启用错误报告。 */
        // "maxNodeModuleJsDepth": 1,                        /* 指定用于检查 'node_modules' 中的 JavaScript 文件的最大文件夹深度。仅在 'allowJs' 为 true 时适用。 */

        /* Emit */
        // "declaration": true,                              /* 从 TypeScript 和 JavaScript 文件中生成 .d.ts 文件。 */
        // "declarationMap": true,                           /* 为 d.ts 文件创建源映射。 */
        // "emitDeclarationOnly": true,                      /* 仅输出 d.ts 文件而不是 JavaScript 文件。 */
        // "sourceMap": true,                                /* 为生成的 JavaScript 文件创建源映射文件。 */
        // "inlineSourceMap": true,                          /* 将 sourcemap 文件包含在生成的 JavaScript 内部。 */
        // "outFile": "./",                                  /* 指定将所有输出捆绑到一个 JavaScript 文件中。如果 'declaration' 为 true，还指定将所有 .d.ts 输出捆绑到一个文件中。 */
        // "outDir": "./",                                   /* 指定所有生成文件的输出文件夹。 */
        // "removeComments": true,                           /* 禁用生成注释。 */
        // "noEmit": true,                                   /* 禁用从编译中生成文件。 */
        // "importHelpers": true,                            /* 允许从 tslib 中一次性导入项目的辅助函数，而不是在每个文件中都包含它们。 */
        // "importsNotUsedAsValues": "remove",               /* 指定对于仅用于类型的导入/检查行为。 */
        // "downlevelIteration": true,                       /* 为迭代生成更符合规范但冗长且性能较差的 JavaScript。 */
        // "sourceRoot": "",                                 /* 指定调试器查找引用源代码的根路径。 */
        // "mapRoot": "",                                    /* 指定调试器应该定位映射文件的位置，而不是生成的位置。 */
        // "inlineSources": true,                            /* 在生成的 JavaScript 的 sourcemaps 中包含源代码。 */
        // "emitBOM": true,                                  /* 在输出文件开头发出 UTF-8 字节顺序标记（BOM）。 */
        // "newLine": "crlf",                                /* 为生成文件设置换行字符。 */
        // "stripInternal": true,                            /* 禁用发出具有 JSDoc 注释中 '@internal' 的声明。 */
        // "noEmitHelpers": true,                            /* 禁用在编译输出中生成自定义辅助函数，如 '__extends'。 */
        // "noEmitOnError": true,                            /* 如果报告任何类型检查错误，则禁用生成文件。 */
        // "preserveConstEnums": true,                       /* 禁止擦除生成代码中的 'const enum' 声明。 */
        // "declarationDir": "./",                           /* 指定生成声明文件的输出目录。 */
        // "preserveValueImports": true,                     /* 在 JavaScript 输出中保留未使用的导入值，否则这些值将被移除。 */
        /* Interop Constraints */
        // "isolatedModules": true,                          /* 确保每个文件可以安全地进行转译，而无需依赖其他导入。 */
        // "verbatimModuleSyntax": true,                     /* 不要转换或省略任何未标记为仅类型的导入或导出，确保它们以输出文件的格式写入。取决于 'module' 设置。 */
        // "allowSyntheticDefaultImports": true,             /* 当模块没有默认导出时，允许 'import x from y'。 */
        // "esModuleInterop": true                           /* 为支持导入 CommonJS 模块而发出额外的 JavaScript。这启用了 'allowSyntheticDefaultImports' 以实现类型兼容性。 */,
        // "preserveSymlinks": true,                         /* 禁用解析符号链接到其真实路径。与 Node 中的相同标志相关。 */
        // "forceConsistentCasingInFileNames": true          /* 确保导入时大小写正确。 */,

        /* Type Checking */
        // "strict": true                                    /* 启用所有严格的类型检查选项。 */,
        // "noImplicitAny": true,                            /* 启用对具有隐含 'any' 类型的表达式和声明的错误报告。 */
        // "strictNullChecks": true,                         /* 在类型检查时考虑 'null' 和 'undefined'。 */
        // "strictFunctionTypes": true,                      /* 在分配函数时，检查确保参数和返回值是子类型兼容的。 */
        // "strictBindCallApply": true,                      /* 检查 'bind'、'call' 和 'apply' 方法的参数是否与原始函数匹配。 */
        // "strictPropertyInitialization": true,             /* 检查在构造函数中声明但未设置的类属性。 */
        // "noImplicitThis": true,                           /* 当 'this' 被赋予 'any' 类型时启用错误报告。 */
        // "useUnknownInCatchVariables": true,               /* 将默认的 catch 子句变量视为 'unknown' 而不是 'any'。 */
        // "alwaysStrict": true,                             /* 确保始终发出 'use strict'。 */
        // "noUnusedLocals": true,                           /* 启用当局部变量未使用时的错误报告。 */
        // "noUnusedParameters": true,                       /* 当函数参数未使用时引发错误。 */
        // "exactOptionalPropertyTypes": true,               /* 将可选属性类型解释为编写的方式，而不是添加 'undefined'。 */
        // "noImplicitReturns": true,                        /* 启用未在函数中显式返回的代码路径的错误报告。 */
        // "noFallthroughCasesInSwitch": true,               /* 启用在 switch 语句中的穿透错误报告。 */
        // "noUncheckedIndexedAccess": true,                 /* 当使用索引访问时，为类型添加 'undefined'。 */
        // "noImplicitOverride": true,                       /* 确保在派生类中覆盖的成员标有 override 修饰符。 */
        // "noPropertyAccessFromIndexSignature": true,       /* 强制使用索引访问器访问使用索引类型声明的键。 */
        // "allowUnusedLabels": true,                        /* 禁用对未使用标签的错误报告。 */
        // "allowUnreachableCode": true,                     /* 禁用对无法访问的代码的错误报告。 */
        /* Completeness */
        // "skipDefaultLibCheck": true,                      /* 跳过 TypeScript 包含的 .d.ts 文件的类型检查。 */
        // "skipLibCheck": true                              /* 跳过对所有 .d.ts 文件的类型检查。 */
    }
}
